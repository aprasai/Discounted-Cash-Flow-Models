import pandas as pd
import numpy as np
import datetime as dt
from dateutil.relativedelta import relativedelta

#Input Values from the User
coupon = .05
amtOutstanding = 2000000
matDate = '3/30/2020'
issDate = '3/30/2010'
valDate = '9/30/2018'
firstCoupon = '12/31/2018'
prepayment = 1000
couponFreq = 12
discRate = .06


def to_datetime(date):
    try:
        date = dt.datetime.strptime(date,'%m/%d/%Y')
    except TypeError:
        date = date
    return date

def year_frac(expDate, valuationDate):
    remainTerm = (to_datetime(expDate) - to_datetime(valuationDate)).days/365
    return remainTerm


#Calculated Values
term = year_frac(matDate, valDate)
numRows = round(term*couponFreq)

dcfTable = pd.DataFrame(np.zeros((numRows,7)), columns=['Date','Remaining Principal', 'Principal Payment', 'Coupon Payment', \
                                                        'Term', 'Discount Factor', 'PV Payment'])
for i in range (numRows):
    dcfTable.iloc[i,2] = prepayment       
    
    if dcfTable.iloc[i,0] != dcfTable.iloc[0,0]:
        dcfTable.iloc[i,0] = dcfTable.iloc[i-1,0] + relativedelta(months=+(12/couponFreq))
        dcfTable.iloc[i,3] = coupon*dcfTable.iloc[i-1,1]
        dcfTable.iloc[i,1] = dcfTable.iloc[i-1,1] - dcfTable.iloc[i,2] 
    else:
        dcfTable.iloc[0,0] = to_datetime(firstCoupon)
        dcfTable.iloc[i,3] = coupon*amtOutstanding
        dcfTable.iloc[i,1] = amtOutstanding - dcfTable.iloc[i,2]

    
    if i==numRows-1:
        dcfTable.iloc[i,1] = 0 
        dcfTable.iloc[i,2] = dcfTable.iloc[i-1,1]

    dcfTable.iloc[i,4] = year_frac(dcfTable.iloc[i,0],valDate)
    dcfTable.iloc[i,5] = (1/((1+discRate)**dcfTable.iloc[i,4]))
    dcfTable.iloc[i,6] = (dcfTable.iloc[i,5] * (dcfTable.iloc[i,3]+dcfTable.iloc[i,2])).round(2)

sumPV = dcfTable['PV Payment'].sum()

print (sumPV)
dcfTable

